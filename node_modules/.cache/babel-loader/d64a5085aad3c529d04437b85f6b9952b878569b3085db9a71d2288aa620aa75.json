{"ast":null,"code":"// axios的封装处理\nimport axios from \"axios\";\nimport { getToken, removeToken } from \"./token\";\nimport router from \"@/router\";\n// 1. 根域名配置\n// 2. 超时时间\n// 3. 请求拦截器 / 响应拦截器\n\nconst request = axios.create({\n  baseURL: 'http://geek.itheima.net/v1_0',\n  timeout: 5000\n});\n\n// 添加请求拦截器\n// 在请求发送之前 做拦截 插入一些自定义的配置 [参数的处理]\nrequest.interceptors.request.use(config => {\n  // 操作这个config 注入token数据\n  // 1. 获取到token\n  // 2. 按照后端的格式要求做token拼接\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\n// 在响应返回到客户端之前 做拦截 重点处理返回的数据\nrequest.interceptors.response.use(response => {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  return response.data;\n}, error => {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  // 监控401 token失效\n  console.dir(error);\n  if (error.response.status === 401) {\n    removeToken();\n    router.navigate('/login');\n    window.location.reload();\n  }\n  return Promise.reject(error);\n});\nexport { request };","map":{"version":3,"names":["axios","getToken","removeToken","router","request","create","baseURL","timeout","interceptors","use","config","token","headers","Authorization","error","Promise","reject","response","data","console","dir","status","navigate","window","location","reload"],"sources":["D:/BaiduNetdiskDownload/React 基础 - 配套资料/React 基础 - 配套资料/React 基础 - day09/03-code/react-jike/src/utils/request.js"],"sourcesContent":["// axios的封装处理\nimport axios from \"axios\"\nimport { getToken, removeToken } from \"./token\"\nimport router from \"@/router\"\n// 1. 根域名配置\n// 2. 超时时间\n// 3. 请求拦截器 / 响应拦截器\n\nconst request = axios.create({\n  baseURL: 'http://geek.itheima.net/v1_0',\n  timeout: 5000\n})\n\n// 添加请求拦截器\n// 在请求发送之前 做拦截 插入一些自定义的配置 [参数的处理]\nrequest.interceptors.request.use((config) => {\n  // 操作这个config 注入token数据\n  // 1. 获取到token\n  // 2. 按照后端的格式要求做token拼接\n  const token = getToken()\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n}, (error) => {\n  return Promise.reject(error)\n})\n\n// 添加响应拦截器\n// 在响应返回到客户端之前 做拦截 重点处理返回的数据\nrequest.interceptors.response.use((response) => {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  return response.data\n}, (error) => {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  // 监控401 token失效\n  console.dir(error)\n  if (error.response.status === 401) {\n    removeToken()\n    router.navigate('/login')\n    window.location.reload()\n  }\n  return Promise.reject(error)\n})\n\nexport { request }\n\n\n\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,SAAS;AAC/C,OAAOC,MAAM,MAAM,UAAU;AAC7B;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAE,8BAA8B;EACvCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAAEC,MAAM,IAAK;EAC3C;EACA;EACA;EACA,MAAMC,KAAK,GAAGV,QAAQ,CAAC,CAAC;EACxB,IAAIU,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAI,UAASF,KAAM,EAAC;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGI,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACA;AACAV,OAAO,CAACI,YAAY,CAACS,QAAQ,CAACR,GAAG,CAAEQ,QAAQ,IAAK;EAC9C;EACA;EACA,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EAAGJ,KAAK,IAAK;EACZ;EACA;EACA;EACAK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;EAClB,IAAIA,KAAK,CAACG,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;IACjCnB,WAAW,CAAC,CAAC;IACbC,MAAM,CAACmB,QAAQ,CAAC,QAAQ,CAAC;IACzBC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,SAASV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}