{"ast":null,"code":"var _jsxFileName = \"D:\\\\BaiduNetdiskDownload\\\\React \\u57FA\\u7840 - \\u914D\\u5957\\u8D44\\u6599\\\\React \\u57FA\\u7840 - \\u914D\\u5957\\u8D44\\u6599\\\\React \\u57FA\\u7840 - day09\\\\03-code\\\\react-jike\\\\src\\\\pages\\\\Home\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\n// 柱状图组件\nimport * as echarts from 'echarts';\nimport { useEffect, useRef } from 'react';\n// 1. 把功能代码都放到这个组件中\n// 2. 把可变的部分抽象成prop参数\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChart = ({\n  title\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    // 保证dom可用 才进行图表的渲染\n    // 1. 获取渲染图表的dom节点\n    const chartDom = chartRef.current;\n\n    // 2. 图表初始化生成图表实例对象\n    const myChart = echarts.init(chartDom);\n\n    // 3. 准备图表参数\n    const option = {\n      title: {\n        text: title\n      },\n      xAxis: {\n        type: 'category',\n        data: ['Vue', 'React', 'Angular']\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        data: [10, 40, 70],\n        type: 'bar'\n      }]\n    };\n    // 4. 使用图表参数完成图表的渲染\n    option && myChart.setOption(option);\n  }, [title]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    style: {\n      width: '500px',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n_s(BarChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["echarts","useEffect","useRef","jsxDEV","_jsxDEV","BarChart","title","_s","chartRef","chartDom","current","myChart","init","option","text","xAxis","type","data","yAxis","series","setOption","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BaiduNetdiskDownload/React 基础 - 配套资料/React 基础 - 配套资料/React 基础 - day09/03-code/react-jike/src/pages/Home/components/BarChart.js"],"sourcesContent":["// 柱状图组件\nimport * as echarts from 'echarts'\nimport { useEffect, useRef } from 'react'\n// 1. 把功能代码都放到这个组件中\n// 2. 把可变的部分抽象成prop参数\n\nconst BarChart = ({ title }) => {\n  const chartRef = useRef(null)\n  useEffect(() => {\n    // 保证dom可用 才进行图表的渲染\n    // 1. 获取渲染图表的dom节点\n    const chartDom = chartRef.current\n\n    // 2. 图表初始化生成图表实例对象\n    const myChart = echarts.init(chartDom)\n\n    // 3. 准备图表参数\n    const option = {\n      title: {\n        text: title\n      },\n      xAxis: {\n        type: 'category',\n        data: ['Vue', 'React', 'Angular']\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [\n        {\n          data: [10, 40, 70],\n          type: 'bar'\n        }\n      ]\n    }\n    // 4. 使用图表参数完成图表的渲染\n    option && myChart.setOption(option)\n\n  }, [title])\n  return <div ref={chartRef} style={{ width: '500px', height: '400px' }}></div>\n}\n\nexport default BarChart"],"mappings":";;AAAA;AACA,OAAO,KAAKA,OAAO,MAAM,SAAS;AAClC,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC7BD,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMQ,QAAQ,GAAGD,QAAQ,CAACE,OAAO;;IAEjC;IACA,MAAMC,OAAO,GAAGX,OAAO,CAACY,IAAI,CAACH,QAAQ,CAAC;;IAEtC;IACA,MAAMI,MAAM,GAAG;MACbP,KAAK,EAAE;QACLQ,IAAI,EAAER;MACR,CAAC;MACDS,KAAK,EAAE;QACLC,IAAI,EAAE,UAAU;QAChBC,IAAI,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,SAAS;MAClC,CAAC;MACDC,KAAK,EAAE;QACLF,IAAI,EAAE;MACR,CAAC;MACDG,MAAM,EAAE,CACN;QACEF,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAClBD,IAAI,EAAE;MACR,CAAC;IAEL,CAAC;IACD;IACAH,MAAM,IAAIF,OAAO,CAACS,SAAS,CAACP,MAAM,CAAC;EAErC,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EACX,oBAAOF,OAAA;IAAKiB,GAAG,EAAEb,QAAS;IAACc,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC/E,CAAC;AAAArB,EAAA,CAlCKF,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAoCd,eAAeA,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}